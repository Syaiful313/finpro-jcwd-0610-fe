"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  CalendarIcon,
  Package,
  Truck,
  Star,
  Clock,
  MapPin,
  Filter,
  Eye,
} from "lucide-react";
import { format } from "date-fns";
import { id } from "date-fns/locale";
import useGetDriverJobs from "@/hooks/api/employee/driver/useGetDriverJob";
import { OrderStatus } from "@/types/enum";

export default function DriverHistoryPage() {
  const [filters, setFilters] = useState({
    type: "",
    dateFrom: undefined as Date | undefined,
    dateTo: undefined as Date | undefined,
    page: 1,
  });

  const {
    data: completedJobsData,
    isLoading,
    isError,
    error,
  } = useGetDriverJobs({ type: "completed" });

  console.log("completedJobsData", completedJobsData);

  const handleFilterChange = (key: string, value: any) => {
    setFilters((prev) => ({ ...prev, [key]: value, page: 1 }));
  };

  const clearFilters = () => {
    setFilters({
      type: "",
      dateFrom: undefined,
      dateTo: undefined,
      page: 1,
    });
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`h-4 w-4 ${i < rating ? "fill-yellow-400 text-yellow-400" : "text-gray-300"}`}
      />
    ));
  };

  const handleViewDetail = (orderUuid: string) => {
    // Navigate to detail page or open modal
    console.log("View detail for order:", orderUuid);
    // You can use router.push or your navigation method here
    // router.push(`/driver/orders/${orderUuid}`);
  };

  // Filter history based on selected filters
  const filteredHistory =
    completedJobsData?.data?.filter((item) => {
      if (filters.type && filters.type !== "all") {
        if (item.jobType !== filters.type) return false;
      }

      // Add date filtering if needed
      if (filters.dateFrom || filters.dateTo) {
        const itemDate = new Date(item.updatedAt);
        if (filters.dateFrom && itemDate < filters.dateFrom) return false;
        if (filters.dateTo && itemDate > filters.dateTo) return false;
      }

      return true;
    }) || [];

  const formatRupiah = (amount: number) => {
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const getStatusBadge = (
    status: keyof typeof OrderStatus,
    jobType: string,
  ) => {
    const statusMap = {
      WAITING_FOR_PICKUP: "WAITING_FOR_PICKUP",
      DRIVER_ON_THE_WAY_TO_CUSTOMER: "DRIVER_ON_THE_WAY_TO_CUSTOMER",
      ARRIVED_AT_CUSTOMER: "ARRIVED_AT_CUSTOMER",
      DRIVER_ON_THE_WAY_TO_OUTLET: "DRIVER_ON_THE_WAY_TO_OUTLET",
      ARRIVED_AT_OUTLET: "ARRIVED_AT_OUTLET",
      BEING_WASHED: "BEING_WASHED",
      BEING_IRONED: "BEING_IRONED",
      BEING_PACKED: "BEING_PACKED",
      WAITING_PAYMENT: "WAITING_PAYMENT",
      READY_FOR_DELIVERY: "READY_FOR_DELIVERY",
      BEING_DELIVERED_TO_CUSTOMER: "BEING_DELIVERED_TO_CUSTOMER",
      DELIVERED_TO_CUSTOMER: "DELIVERED_TO_CUSTOMER",
      IN_RESOLUTION: "IN_RESOLUTION",
      COMPLETED: "COMPLETED",
    };

    return statusMap[status] || status;
  };

  const getJobTypeLabel = (jobType: string) => {
    return jobType === "pickup" ? "Pickup" : "Delivery";
  };

  if (isLoading) {
    return (
      <div className="space-y-6 p-3 md:p-6">
        <Card>
          <CardContent className="flex items-center justify-center p-8">
            <div className="text-center">
              <div className="border-primary mx-auto mb-4 h-8 w-8 animate-spin rounded-full border-b-2"></div>
              <p>Loading...</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="space-y-6 p-3 md:p-6">
        <Card>
          <CardContent className="flex items-center justify-center p-8">
            <div className="text-center">
              <p className="text-red-500">
                Error loading data: {error?.message}
              </p>
              <Button className="mt-4">Retry</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-3 md:p-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-2xl font-bold">
            <Truck className="h-6 w-6" />
            Driver History
          </CardTitle>
          <CardDescription>
            View and filter completed delivery jobs
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Filters */}
          <div className="bg-muted rounded-lg p-4">
            <div className="grid gap-4 md:grid-cols-4">
              <div>
                <label className="mb-2 block text-sm font-medium">Type</label>
                <Select
                  value={filters.type}
                  onValueChange={(value) => handleFilterChange("type", value)}
                >
                  <SelectTrigger className="w-full bg-white">
                    <SelectValue placeholder="Semua jenis" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Semua jenis</SelectItem>
                    <SelectItem value="pickup">Pickup</SelectItem>
                    <SelectItem value="delivery">Delivery</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label className="mb-2 block text-sm font-medium">
                  Dari Tanggal
                </label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className="w-full justify-start text-left font-normal"
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {filters.dateFrom
                        ? format(filters.dateFrom, "dd MMM yyyy", {
                            locale: id,
                          })
                        : "Pilih tanggal"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={filters.dateFrom}
                      onSelect={(date) => handleFilterChange("dateFrom", date)}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div>
                <label className="mb-2 block text-sm font-medium">
                  Sampai Tanggal
                </label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className="w-full justify-start text-left font-normal"
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {filters.dateTo
                        ? format(filters.dateTo, "dd MMM yyyy", {
                            locale: id,
                          })
                        : "Pilih tanggal"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={filters.dateTo}
                      onSelect={(date) => handleFilterChange("dateTo", date)}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="flex items-end">
                <Button
                  variant="outline"
                  onClick={clearFilters}
                  className="w-full"
                >
                  Reset Filter
                </Button>
              </div>
            </div>
          </div>

          {/* History List */}
          <div>
            <div className="mb-4">
              <h3 className="text-lg font-semibold">Riwayat Pengantaran</h3>
              <p className="text-muted-foreground text-sm">
                Total: {completedJobsData?.meta?.total || 0} pengantaran
              </p>
            </div>

            <div>
              {filteredHistory.length === 0 ? (
                <div className="text-muted-foreground py-8 text-center">
                  Tidak ada riwayat pengantaran
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredHistory.map((item) => (
                    <div
                      key={item.order.updatedAt}
                      className="rounded-lg border p-3 sm:p-4"
                    >
                      {/* Header - Mobile: Stack, Desktop: Side by side */}
                      <div className="mb-3 flex flex-col gap-3 sm:flex-row sm:items-start sm:justify-between">
                        <div className="flex items-center gap-3">
                          <div
                            className={`rounded-full p-2 ${
                              item.jobType === "pickup"
                                ? "bg-blue-100"
                                : "bg-green-100"
                            }`}
                          >
                            {item.jobType === "pickup" ? (
                              <Package className="h-4 w-4 text-blue-600" />
                            ) : (
                              <Truck className="h-4 w-4 text-green-600" />
                            )}
                          </div>
                          <div>
                            <h3 className="text-sm font-semibold sm:text-base">
                              {item.order.orderNumber}
                            </h3>
                            <p className="text-muted-foreground text-xs sm:text-sm">
                              {getJobTypeLabel(item.jobType)}
                            </p>
                          </div>
                        </div>
                        <div className="text-left sm:text-right">
                          {/* Only show price for delivery jobs */}
                          {item.jobType === "delivery" &&
                            item.order.totalWeight && (
                              <div className="text-sm font-medium sm:text-base">
                                {formatRupiah(item.order.totalWeight)}
                              </div>
                            )}
                          <div className="text-muted-foreground text-xs sm:text-sm">
                            {format(
                              new Date(item.updatedAt),
                              "dd MMM yyyy, HH:mm",
                              { locale: id },
                            )}
                          </div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium sm:text-base">
                            {item.order.user.firstName}{" "}
                            {item.order.user.lastName}
                          </span>
                        </div>

                        <div className="flex items-start gap-2">
                          <MapPin className="text-muted-foreground mt-0.5 h-4 w-4 flex-shrink-0" />
                          <span className="text-xs break-words sm:text-sm">
                            {item.order.addressLine}, {item.order.district},{" "}
                            {item.order.city}, {item.order.province}{" "}
                            {item.order.postalCode}
                          </span>
                        </div>

                        {/* Bottom section - Mobile: Stack, Desktop: Side by side */}
                        <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between sm:gap-4">
                          <div className="text-muted-foreground flex flex-wrap items-center gap-2 text-xs sm:gap-4 sm:text-sm">
                            <Badge
                              variant={
                                item.status === "COMPLETED"
                                  ? "default"
                                  : "secondary"
                              }
                              className="text-xs"
                            >
                              {getStatusBadge(
                                item.order
                                  .orderStatus as keyof typeof OrderStatus,
                                item.jobType,
                              )}
                            </Badge>
                            <div className="text-muted-foreground text-xs">
                              {item.order.outlet.outletName}
                            </div>
                          </div>

                          <div className="flex items-center gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleViewDetail(item.order.uuid)}
                              className="text-xs sm:text-sm"
                            >
                              <Eye className="mr-1 h-3 w-3 sm:h-4 sm:w-4" />
                              View Detail
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {/* Pagination - Mobile: Stack, Desktop: Side by side */}
              {completedJobsData?.meta &&
                completedJobsData.meta.total > completedJobsData.meta.take && (
                  <div className="mt-6 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                    <div className="text-muted-foreground text-center text-xs sm:text-left sm:text-sm">
                      Halaman {completedJobsData.meta.page} dari{" "}
                      {Math.ceil(
                        completedJobsData.meta.total /
                          completedJobsData.meta.take,
                      )}
                    </div>
                    <div className="flex justify-center gap-2 sm:justify-start">
                      <Button
                        variant="outline"
                        size="sm"
                        disabled={!completedJobsData.meta.hasPrevious}
                        onClick={() =>
                          handleFilterChange(
                            "page",
                            completedJobsData.meta.page - 1,
                          )
                        }
                        className="text-xs sm:text-sm"
                      >
                        Sebelumnya
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        disabled={!completedJobsData.meta.hasNext}
                        onClick={() =>
                          handleFilterChange(
                            "page",
                            completedJobsData.meta.page + 1,
                          )
                        }
                        className="text-xs sm:text-sm"
                      >
                        Selanjutnya
                      </Button>
                    </div>
                  </div>
                )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
