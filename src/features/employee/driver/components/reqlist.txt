"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import useGetAvailableRequest from "@/hooks/api/employee/driver/useGetAvailableRequest";
import { format } from "date-fns";
import {
  ChevronLeft,
  ChevronRight,
  Clock,
  Loader2,
  MapIcon,
  MapPin,
  Navigation,
  Package,
  Phone,
  Search,
  SortAsc,
  SortDesc,
  Truck,
} from "lucide-react";
import { useEffect, useState } from "react";
import MapModal from "./MapModal";

export default function RequestList() {
  const [activeTab, setActiveTab] = useState("All");
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState("desc");
  const [currentPage, setCurrentPage] = useState(1);
  const [showMap, setShowMap] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState<any | null>(null);

  const itemsPerPage = 4;
  const driverBusy = false; // Mock driver status - you might want to fetch this from another API
  const orderLimit = 5; // Mock order limit - you might want to fetch this from another API
  const currentOrders = 2; // Mock current orders - you might want to fetch this from another API

  // Build query parameters for the API
  const queryParams = {
    page: currentPage, // Your API uses 1-based indexing
    take: itemsPerPage,
    search: searchTerm || undefined,
    sortBy: "createdAt",
    sortOrder: sortOrder,
    all: false,
  };

  // Determine request type based on active tab
  const requestType =
    activeTab === "All"
      ? "all"
      : (activeTab.toLowerCase() as "pickup" | "delivery");

  // Fetch data using the custom hook
  const {
    data: apiResponse,
    isLoading,
    isError,
    error,
    refetch,
  } = useGetAvailableRequest({ ...queryParams, requestType });

  const filteredRequests = apiResponse?.data || [];
  const totalPages = apiResponse?.meta?.total || 0;
  const totalElements = apiResponse?.meta?.total || 0;

  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [activeTab, searchTerm, sortOrder]);

  const handleClaimRequest = async (requestId: number) => {
    try {
      // TODO: Implement claim functionality with your API
      console.log(`Claiming request ${requestId}`);
      // After successful claim, refetch the data
      refetch();
    } catch (error) {
      console.error("Failed to claim request:", error);
      // Handle error (show toast, etc.)
    }
  };
  const handleCloseMapModal = () => {
    setSelectedRequest(null);
  };
  const handleNavigate = (coordinates: { lat: number; lng: number }) => {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${coordinates.lat},${coordinates.lng}`;
    window.open(url, "_blank");
  };

  const canClaimOrder =
    filteredRequests.length > 0 ? filteredRequests[0].canClaim : false;

  const RequestCard = ({ request }: { request: any }) => (
    <Card className="w-full">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <CardTitle className="text-lg">
              {`${request.user.firstName} ${request.user.lastName}`}
            </CardTitle>
            <CardDescription className="flex items-center gap-2">
              <Phone className="h-4 w-4" />
              {request.user.phoneNumber}
            </CardDescription>
          </div>
          <Badge
            variant={
              request.orderStatus === "WAITING_FOR_PICKUP"
                ? "outline"
                : "secondary"
            }
            className="flex items-center gap-1"
          >
            {request.orderStatus === "WAITING_FOR_PICKUP" ? (
              <Package className="h-3 w-3" />
            ) : (
              <Truck className="h-3 w-3" />
            )}
            {request.orderStatus === "WAITING_FOR_PICKUP"
              ? "Pickup"
              : "Delivery"}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 gap-3 text-sm sm:grid-cols-2">
          <div className="flex items-center gap-2">
            <MapPin className="text-muted-foreground h-4 w-4" />
            <span className="truncate">{request.outlet.outletName}</span>
          </div>
          <div className="flex items-center gap-2">
            <Clock className="text-muted-foreground h-4 w-4" />
            <span>{format(new Date(request.createdAt), "MMM dd, h:mm a")}</span>
          </div>
        </div>

        <div className="text-muted-foreground text-sm">
          <div className="flex items-start gap-2">
            <MapPin className="mt-0.5 h-4 w-4 flex-shrink-0" />
            <span>{request.customerAddress || "Address not provided"}</span>
          </div>
        </div>

        <div className="flex gap-2 pt-2">
          <Button
            onClick={() => handleClaimRequest(request.id)}
            disabled={!request.canClaim}
            className="flex-1"
          >
            {request.canClaim ? "Claim Order" : "Unavailable"}
          </Button>

          <Button variant="outline" className="flex-1">
            View Detail
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => handleNavigate({ lat: 0, lng: 0 })}
          >
            <Navigation className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => setSelectedRequest(request)}
          >
            <MapIcon className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );

  const LoadingState = () => (
    <div className="flex items-center justify-center py-12">
      <div className="flex items-center gap-2">
        <Loader2 className="h-6 w-6 animate-spin" />
        <span>Loading requests...</span>
      </div>
    </div>
  );

  const ErrorState = () => (
    <Card className="py-12 text-center">
      <CardContent>
        <div className="text-destructive mx-auto mb-4 h-12 w-12">⚠️</div>
        <h3 className="mb-2 text-lg font-semibold">Failed to load requests</h3>
        <p className="text-muted-foreground mb-4">
          {error?.message || "Something went wrong while fetching requests."}
        </p>
        <Button onClick={() => refetch()}>Try Again</Button>
      </CardContent>
    </Card>
  );

  return (
    <div className="bg-background min-h-screen">
      {/* Header */}
      <div className="bg-background sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="mb-4 flex items-center justify-between">
            <div>
              <h1 className="flex items-center text-2xl font-bold">
                <Truck className="mr-2 h-8 w-8" /> Request List
              </h1>
              <p className="text-muted-foreground text-sm">
                Active Orders: {currentOrders}/{orderLimit} • Status:{" "}
                {driverBusy ? "Busy" : "Available"}
              </p>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowMap(!showMap)}
            >
              <MapIcon className="mr-2 h-4 w-4" />
              {showMap ? "Hide Map" : "Show Map"}
            </Button>
          </div>

          {/* Filters */}
          <div className="space-y-4">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="All">All</TabsTrigger>
                <TabsTrigger value="Pickup">Pickup</TabsTrigger>
                <TabsTrigger value="Delivery">Delivery</TabsTrigger>
              </TabsList>
            </Tabs>

            <div className="flex flex-col gap-3 sm:flex-row">
              <div className="relative flex-1">
                <Search className="text-muted-foreground absolute top-2.5 left-3 h-4 w-4" />
                <Input
                  placeholder="Search by name or phone..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9"
                />
              </div>
              <Select value={sortOrder} onValueChange={setSortOrder}>
                <SelectTrigger className="w-full sm:w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="desc">
                    <div className="flex items-center gap-2">
                      <SortDesc className="h-4 w-4" />
                      Newest First
                    </div>
                  </SelectItem>
                  <SelectItem value="asc">
                    <div className="flex items-center gap-2">
                      <SortAsc className="h-4 w-4" />
                      Oldest First
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-6">
        {/* Results Summary */}
        {!isLoading && !isError && (
          <div className="mb-6 flex items-center justify-between">
            <p className="text-muted-foreground text-sm">
              Showing {filteredRequests.length} of {totalElements} requests
            </p>
            {totalPages > 0 && (
              <p className="text-muted-foreground text-sm">
                Page {currentPage} of {totalPages}
              </p>
            )}
          </div>
        )}

        {/* Content */}
        {isLoading ? (
          <LoadingState />
        ) : isError ? (
          <ErrorState />
        ) : filteredRequests.length > 0 ? (
          <div className="space-y-4">
            {filteredRequests.map((request) => (
              <RequestCard key={request.uuid} request={request} />
            ))}
          </div>
        ) : (
          <Card className="py-12 text-center">
            <CardContent>
              <Package className="text-muted-foreground mx-auto mb-4 h-12 w-12" />
              <h3 className="mb-2 text-lg font-semibold">
                No requests available
              </h3>
              <p className="text-muted-foreground">
                {searchTerm || activeTab !== "All"
                  ? "Try adjusting your filters to see more results."
                  : "Check back later for new pickup and delivery requests."}
              </p>
            </CardContent>
          </Card>
        )}

        {/* Pagination */}
        {totalPages > 1 && !isLoading && (
          <div className="mt-8 flex items-center justify-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
            >
              <ChevronLeft className="h-4 w-4" />
              Previous
            </Button>

            <div className="flex items-center gap-1">
              {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
                let page;
                if (totalPages <= 5) {
                  page = i + 1;
                } else if (currentPage <= 3) {
                  page = i + 1;
                } else if (currentPage >= totalPages - 2) {
                  page = totalPages - 4 + i;
                } else {
                  page = currentPage - 2 + i;
                }

                return (
                  <Button
                    key={page}
                    variant={currentPage === page ? "default" : "outline"}
                    size="sm"
                    onClick={() => setCurrentPage(page)}
                    className="w-10"
                  >
                    {page}
                  </Button>
                );
              })}
            </div>

            <Button
              variant="outline"
              size="sm"
              onClick={() =>
                setCurrentPage((prev) => Math.min(totalPages, prev + 1))
              }
              disabled={currentPage === totalPages}
            >
              Next
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        )}
      </div>

      {/* Map Modal */}
      <MapModal
        selectedRequest={selectedRequest}
        onClose={handleCloseMapModal}
        onNavigate={handleNavigate}
      />
    </div>
  );
}
