"use client";

import type React from "react";
import { useState } from "react";
import {
  ArrowLeft,
  Phone,
  Copy,
  Navigation,
  Camera,
  MapPin,
  Clock,
  Package,
  User,
  Map,
  CheckCircle,
} from "lucide-react";
import Image from "next/image";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";

// Import the types we created

import {
  Job,
  DriverJobResponse,
  DriverTaskStatus,
  OrderStatus,
  formatFullAddress,
  getCustomerName,
  formatCurrency,
  formatDateTime,
} from "@/types/detailApi";
import { toast } from "sonner";
import useStartPickUp from "@/hooks/api/employee/driver/useStartPickUp";
import useStartDelivery from "@/hooks/api/employee/driver/useStartDelivery";
import useCompletePickUp from "@/hooks/api/employee/driver/useCompletePickUp";
import useCompleteDelivery from "@/hooks/api/employee/driver/useCompleteDelivery";
import { useFormik } from "formik";
interface DriverOrderDetailPageProps {
  jobData: DriverJobResponse;
}

interface CompleteJobFormValues {
  notes: string;
  photos: File[];
}

export default function JobDetails({ jobData }: DriverOrderDetailPageProps) {
  const [job, setJob] = useState<Job>(jobData.job);
  const [isCompleteDialogOpen, setIsCompleteDialogOpen] = useState(false);
  const [isStartJobDialogOpen, setIsStartJobDialogOpen] = useState(false);
  const [notes, setNotes] = useState(job.notes || "");
  const [selectedPhotos, setSelectedPhotos] = useState<File[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const startPickUpMutation = useStartPickUp();
  const startDeliveryMutation = useStartDelivery();
  const completePickUpMutation = useCompletePickUp(job.id);
  const completeDeliveryMutation = useCompleteDelivery(job.id);

  // Tentukan mutation yang akan digunakan berdasarkan job type
  const startJobMutation =
    jobData.type === "pickup" ? startPickUpMutation : startDeliveryMutation;
  const completeJobMutation =
    jobData.type === "pickup"
      ? completePickUpMutation
      : completeDeliveryMutation;

  const initialValues: CompleteJobFormValues = {
    notes: job.notes || "",
    photos: [],
  };

  const formik = useFormik({
    initialValues,
    enableReinitialize: true,
    onSubmit: async (values) => {
      if (values.photos.length === 0) {
        toast.error("Please upload at least one photo to complete the task.");
        return;
      }

      try {
        await completeJobMutation.mutateAsync({
          notes: values.notes,
          photos: values.photos,
        });

        // Update local job status
        setJob((prev) => ({
          ...prev,
          status: DriverTaskStatus.COMPLETED,
          notes: values.notes,
        }));

        setIsCompleteDialogOpen(false);
        formik.resetForm();
      } catch (error) {
        console.error("Error completing task:", error);
      }
    },
  });


  // Helper functions
  const getStatusColor = (status: DriverTaskStatus | OrderStatus) => {
    switch (status) {
      case DriverTaskStatus.PENDING:
      case OrderStatus.WAITING_FOR_PICKUP:
        return "bg-orange-500";
      case DriverTaskStatus.ASSIGNED:
      case OrderStatus.DRIVER_ON_THE_WAY_TO_CUSTOMER:
        return "bg-blue-500";
      case DriverTaskStatus.IN_PROGRESS:
      case OrderStatus.ARRIVED_AT_CUSTOMER:
      case OrderStatus.BEING_DELIVERED_TO_CUSTOMER:
        return "bg-green-500";
      case DriverTaskStatus.COMPLETED:
      case OrderStatus.COMPLETED:
      case OrderStatus.DELIVERED_TO_CUSTOMER:
        return "bg-gray-500";
      case DriverTaskStatus.CANCELLED:
        return "bg-red-500";
      default:
        return "bg-gray-500";
    }
  };

  const getStatusText = (status: DriverTaskStatus | OrderStatus) => {
    switch (status) {
      case DriverTaskStatus.PENDING:
        return "Pending";
      case DriverTaskStatus.ASSIGNED:
        return "Assigned";
      case DriverTaskStatus.IN_PROGRESS:
        return "In Progress";
      case DriverTaskStatus.COMPLETED:
        return "Completed";
      case DriverTaskStatus.CANCELLED:
        return "Cancelled";
      case OrderStatus.WAITING_FOR_PICKUP:
        return "Waiting for Pickup";
      case OrderStatus.DRIVER_ON_THE_WAY_TO_CUSTOMER:
        return "Driver on the Way";
      case OrderStatus.ARRIVED_AT_CUSTOMER:
        return "Arrived at Customer";
      case OrderStatus.BEING_DELIVERED_TO_CUSTOMER:
        return "Being Delivered";
      case OrderStatus.DELIVERED_TO_CUSTOMER:
        return "Delivered";
      case OrderStatus.COMPLETED:
        return "Completed";
      default:
        return status.replace(/_/g, " ");
    }
  };

  // Get formatted address
  const addressInfo = formatFullAddress(job.order);

  // Get customer name (this might need adjustment based on your user structure)
  const customerName = getCustomerName(jobData.job);

  // Get customer phone (you might need to fetch this separately or include in the API)
  const customerPhone = job.order.user.phoneNumber;

  const copyAddress = () => {
    navigator.clipboard.writeText(addressInfo.fullAddress);
    // alert("Address copied to clipboard!");
    toast("Address copied to clipboard!");
  };

  const callCustomer = () => {
    window.open(`tel:${customerPhone}`);
  };

  const startNavigation = () => {
    // Since we don't have lat/lng in the current API, use address for navigation
    const encodedAddress = encodeURIComponent(addressInfo.fullAddress);
    const url = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;
    window.open(url, "_blank");
  };

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setSelectedPhotos((prev) => [...prev, ...files]);
  };

  const removePhoto = (index: number) => {
    setSelectedPhotos((prev) => prev.filter((_, i) => i !== index));
  };

  const startJob = async () => {
    try {
      const result = await startJobMutation.mutateAsync(job.id);

      setJob((prev) => ({
        ...prev,
        status: DriverTaskStatus.IN_PROGRESS,
      }));
      setIsStartJobDialogOpen(false);
      const taskType = jobData.type === "pickup" ? "Pickup" : "Delivery";
    } catch (error) {
      console.error("Error starting job:", error);
    }
  };

  const completeTask = async () => {
    if (selectedPhotos.length === 0) {
      alert("Please upload at least one photo to complete the task.");
      return;
    }

    setIsLoading(true);
    try {
      const taskType = jobData.type;

      // Create FormData for photo upload
      const formData = new FormData();
      selectedPhotos.forEach((photo) => {
        formData.append(`photos`, photo);
      });
      formData.append("notes", notes);
      formData.append("jobId", job.id.toString());
      formData.append("taskType", taskType);

      // TODO: Replace with actual API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Update job status to COMPLETED
      setJob((prev) => ({
        ...prev,
        status: DriverTaskStatus.COMPLETED,
        notes: notes,
      }));

      setIsCompleteDialogOpen(false);
      alert(
        `${taskType.charAt(0).toUpperCase() + taskType.slice(1)} completed successfully!`,
      );

      // Reset form
      setSelectedPhotos([]);
      setNotes("");
    } catch (error) {
      console.error("Error completing task:", error);
      alert("Failed to complete task. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const renderActionButtons = () => {
    const taskType = jobData.type === "pickup" ? "Pickup" : "Delivery";

    if (job.status === DriverTaskStatus.COMPLETED) {
      return (
        <div className="fixed right-0 bottom-0 left-0 p-4 md:static">
          <div className="flex items-center justify-center gap-2 text-green-600 md:p-5">
            <CheckCircle className="h-5 w-5" />
            <span className="font-medium">
              {taskType} Completed Successfully!
            </span>
          </div>
        </div>
      );
    }

    switch (job.status) {
      case DriverTaskStatus.ASSIGNED:
        return (
          <div className="fixed right-0 bottom-0 left-0 space-y-2 border-t bg-white p-4">
            <Dialog
              open={isStartJobDialogOpen}
              onOpenChange={setIsStartJobDialogOpen}
            >
              <DialogTrigger asChild>
                <Button className="w-full" size="lg">
                  <MapPin className="mr-2 h-4 w-4" />
                  Start {taskType}
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Start {taskType} Job</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <Alert>
                    <MapPin className="h-4 w-4" />
                    <AlertDescription>
                      Are you ready to start the {taskType.toLowerCase()} job?
                      Make sure you have arrived at the customer location.
                    </AlertDescription>
                  </Alert>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      onClick={() => setIsStartJobDialogOpen(false)}
                      className="flex-1"
                      disabled={isLoading}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={startJob}
                      className="flex-1"
                      disabled={isLoading}
                    >
                      {isLoading ? "Starting..." : `Start ${taskType}`}
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        );
      case DriverTaskStatus.IN_PROGRESS:
        return (
          <div className="fixed right-0 bottom-0 left-0 border-t bg-white p-4">
            <Dialog
              open={isCompleteDialogOpen}
              onOpenChange={setIsCompleteDialogOpen}
            >
              <DialogTrigger asChild>
                <Button className="w-full" size="lg">
                  <Camera className="mr-2 h-4 w-4" />
                  Complete {taskType}
                </Button>
              </DialogTrigger>
              <DialogContent className="max-h-[80vh] overflow-y-auto sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Complete {taskType}</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <Alert>
                    <Camera className="h-4 w-4" />
                    <AlertDescription>
                      Please upload photos and add notes to complete the{" "}
                      {taskType.toLowerCase()}.
                    </AlertDescription>
                  </Alert>

                  <div>
                    <Label htmlFor="photos">Upload Photos *</Label>
                    <Input
                      id="photos"
                      type="file"
                      multiple
                      accept="image/*"
                      onChange={handlePhotoUpload}
                      className="mt-1"
                    />
                    <p className="mt-1 text-xs text-gray-500">
                      Upload photos as proof of {taskType.toLowerCase()}{" "}
                      completion (Required)
                    </p>
                  </div>

                  {selectedPhotos.length > 0 && (
                    <div>
                      <Label>Selected Photos ({selectedPhotos.length})</Label>
                      <div className="mt-2 grid grid-cols-2 gap-2">
                        {selectedPhotos.map((photo, index) => (
                          <div key={index} className="relative">
                            <Image
                              src={URL.createObjectURL(photo)}
                              alt={`Photo ${index + 1}`}
                              width={100}
                              height={100}
                              className="h-20 w-full rounded border object-cover"
                            />
                            <Button
                              size="sm"
                              variant="destructive"
                              className="absolute top-1 right-1 h-6 w-6 p-0"
                              onClick={() => removePhoto(index)}
                            >
                              ×
                            </Button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div>
                    <Label htmlFor="notes">Notes</Label>
                    <Textarea
                      id="notes"
                      placeholder={`Add notes about the ${taskType.toLowerCase()}...`}
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      className="mt-1"
                      rows={3}
                    />
                    <p className="mt-1 text-xs text-gray-500">
                      Optional: Add any relevant notes or observations
                    </p>
                  </div>

                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      onClick={() => setIsCompleteDialogOpen(false)}
                      className="flex-1"
                      disabled={isLoading}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={completeTask}
                      className="flex-1"
                      disabled={selectedPhotos.length === 0 || isLoading}
                    >
                      {isLoading ? "Completing..." : `Complete ${taskType}`}
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      {/* Header */}
      <div className="border-b bg-white p-4">
        <div className="flex items-center gap-3">
          <Button variant="ghost" size="icon">
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div className="flex gap-3">
            <h1 className="text-lg font-semibold">#{job.order.orderNumber}</h1>
            <Badge className={`${getStatusColor(job.status)} text-white`}>
              {getStatusText(job.status)}
            </Badge>
          </div>
        </div>
      </div>

      {/* Status Progress Indicator */}
      <div className="border-b bg-white p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div
              className={`h-3 w-3 rounded-full ${job.status === DriverTaskStatus.ASSIGNED ? "bg-blue-500" : "bg-green-500"}`}
            />
            <span className="text-sm font-medium">Assigned</span>
          </div>
          <div className="mx-4 h-0.5 flex-1 bg-gray-200">
            <div
              className={`h-full transition-all duration-500 ${job.status === DriverTaskStatus.IN_PROGRESS || job.status === DriverTaskStatus.COMPLETED ? "w-full bg-green-500" : "w-0 bg-gray-200"}`}
            />
          </div>
          <div className="flex items-center gap-2">
            <div
              className={`h-3 w-3 rounded-full ${job.status === DriverTaskStatus.IN_PROGRESS ? "bg-green-500" : job.status === DriverTaskStatus.COMPLETED ? "bg-green-500" : "bg-gray-300"}`}
            />
            <span className="text-sm font-medium">In Progress</span>
          </div>
          <div className="mx-4 h-0.5 flex-1 bg-gray-200">
            <div
              className={`h-full transition-all duration-500 ${job.status === DriverTaskStatus.COMPLETED ? "w-full bg-green-500" : "w-0 bg-gray-200"}`}
            />
          </div>
          <div className="flex items-center gap-2">
            <div
              className={`h-3 w-3 rounded-full ${job.status === DriverTaskStatus.COMPLETED ? "bg-green-500" : "bg-gray-300"}`}
            />
            <span className="text-sm font-medium">Completed</span>
          </div>
        </div>
      </div>

      {/* Customer Info Card */}
      <Card className="m-4">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-lg">
              <User className="h-5 w-5" />
              {customerName}
            </CardTitle>
            <Button variant="outline" size="sm" onClick={callCustomer}>
              <Phone className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <p className="text-sm text-gray-600">Phone Number</p>
            <p className="font-medium">{customerPhone}</p>
          </div>
          <div>
            <div className="flex items-center justify-between">
              <p className="text-sm text-gray-600">Address</p>
              <Button variant="ghost" size="sm" onClick={copyAddress}>
                <Copy className="h-4 w-4" />
              </Button>
            </div>
            <p className="font-medium">{addressInfo.addressLine}</p>
            <p className="text-sm text-gray-600">
              {addressInfo.district}, {addressInfo.city}, {addressInfo.province}{" "}
              {addressInfo.postalCode}
            </p>
          </div>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-1">
              <Clock className="h-4 w-4 text-gray-500" />
              <span>{formatDateTime(job.pickUpScheduleOutlet)}</span>
            </div>
            <Badge variant="outline">{jobData.type.toUpperCase()}</Badge>
          </div>
        </CardContent>
      </Card>

      {/* Map Section */}
      <Card className="m-4">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2">
            <Map className="h-5 w-5" />
            Customer Location
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex h-64 items-center justify-center rounded-lg bg-gray-200">
            <div className="text-center">
              <MapPin className="mx-auto mb-2 h-8 w-8 text-gray-500" />
              <p className="text-sm text-gray-600">Interactive Map</p>
              <p className="text-xs text-gray-500">{addressInfo.fullAddress}</p>
            </div>
          </div>
          <Button
            variant="outline"
            className="mt-3 w-full"
            onClick={startNavigation}
          >
            <Navigation className="mr-2 h-4 w-4" />
            Open in Google Maps
          </Button>
        </CardContent>
      </Card>

      {/* Order Details - Only show for delivery jobs */}
      {jobData.type === "delivery" && (
        <Card className="m-4">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Package className="h-5 w-5" />
              Order Details
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span className="text-gray-600">Order Number</span>
                <span className="font-medium">#{job.order.orderNumber}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Total Weight</span>
                <span className="font-medium">{job.order.totalWeight} kg</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Delivery Fee</span>
                <span className="font-medium">
                  {formatCurrency(job.order.totalDeliveryFee)}
                </span>
              </div>
              <div className="flex justify-between text-lg font-semibold">
                <span>Total Price</span>
                <span>{formatCurrency(job.order.totalPrice)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Payment Status</span>
                <Badge
                  variant={
                    job.order.paymentStatus === "PAID" ? "default" : "secondary"
                  }
                >
                  {job.order.paymentStatus.replace(/_/g, " ")}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Job Status Card */}
      <Card className="m-4">
        <CardHeader>
          <CardTitle>Task Status</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-3">
            <Badge className={`${getStatusColor(job.status)} text-white`}>
              {getStatusText(job.status)}
            </Badge>
            <span className="text-sm text-gray-600">
              {jobData.type.charAt(0).toUpperCase() + jobData.type.slice(1)}{" "}
              Task
            </span>
          </div>
          {job.notes && (
            <div className="mt-3 rounded-lg bg-gray-50 p-3">
              <p className="text-sm text-gray-600">Driver Notes:</p>
              <p className="text-sm">{job.notes}</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Action Buttons */}
      {renderActionButtons()}
    </div>
  );
}
